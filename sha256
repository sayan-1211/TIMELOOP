`timescale 1ns / 1ps

module sha256 (
    input clk,
    input rst,
    input start,
    input [15:0] data_in,
    output reg [15:0] hash_out,
    output reg done
);

    reg [2:0] state, next_state;
    reg [511:0] data_buf;
    reg [5:0] data_count;
    reg [31:0] H0, H1, H2, H3, H4, H5, H6, H7;
    reg [31:0] a, b, c, d, e, f, g, h;
    reg [31:0] W [0:63];
    reg [31:0] T1, T2;
    integer i;
    
    // State encoding
    parameter IDLE = 3'b000, INIT = 3'b001, LOAD = 3'b010, COMPUTE = 3'b011, OUTPUT = 3'b100, DONE = 3'b101;
    
    // SHA-256 constants
    reg [31:0] K [0:63];
    initial
    begin
        K[0]  = 32'h428a2f98; K[1]  = 32'h71374491; K[2]  = 32'hb5c0fbcf; K[3]  = 32'he9b5dba5;
        K[4]  = 32'h3956c25b; K[5]  = 32'h59f111f1; K[6]  = 32'h923f82a4; K[7]  = 32'hab1c5ed5;
        K[8]  = 32'hd807aa98; K[9]  = 32'h12835b01; K[10] = 32'h243185be; K[11] = 32'h550c7dc3;
        K[12] = 32'h72be5d74; K[13] = 32'h80deb1fe; K[14] = 32'h9bdc06a7; K[15] = 32'hc19bf174;
        K[16] = 32'he49b69c1; K[17] = 32'hefbe4786; K[18] = 32'h0fc19dc6; K[19] = 32'h240ca1cc;
        K[20] = 32'h2de92c6f; K[21] = 32'h4a7484aa; K[22] = 32'h5cb0a9dc; K[23] = 32'h76f988da;
        K[24] = 32'h983e5152; K[25] = 32'ha831c66d; K[26] = 32'hb00327c8; K[27] = 32'hbf597fc7;
        K[28] = 32'hc6e00bf3; K[29] = 32'hd5a79147; K[30] = 32'h06ca6351; K[31] = 32'h14292967;
        K[32] = 32'h27b70a85; K[33] = 32'h2e1b2138; K[34] = 32'h4d2c6dfc; K[35] = 32'h53380d13;
        K[36] = 32'h650a7354; K[37] = 32'h766a0abb; K[38] = 32'h81c2c92e; K[39] = 32'h92722c85;
        K[40] = 32'ha2bfe8a1; K[41] = 32'ha81a664b; K[42] = 32'hc24b8b70; K[43] = 32'hc76c51a3;
        K[44] = 32'hd192e819; K[45] = 32'hd6990624; K[46] = 32'hf40e3585; K[47] = 32'h106aa070;
        K[48] = 32'h19a4c116; K[49] = 32'h1e376c08; K[50] = 32'h2748774c; K[51] = 32'h34b0bcb5;
        K[52] = 32'h391c0cb3; K[53] = 32'h4ed8aa4a; K[54] = 32'h5b9cca4f; K[55] = 32'h682e6ff3;
        K[56] = 32'h748f82ee; K[57] = 32'h78a5636f; K[58] = 32'h84c87814; K[59] = 32'h8cc70208;
        K[60] = 32'h90befffa; K[61] = 32'ha4506ceb; K[62] = 32'hbef9a3f7; K[63] = 32'hc67178f2;
    end
    
    // SHA-256 initial hash values
    initial
    begin
        H0 = 32'h6a09e667; H1 = 32'hbb67ae85; H2 = 32'h3c6ef372; H3 = 32'ha54ff53a;
        H4 = 32'h510e527f; H5 = 32'h9b05688c; H6 = 32'h1f83d9ab; H7 = 32'h5be0cd19;
    end

    // SHA-256 functions
    function [31:0] Ch(input [31:0] x, y, z);
        Ch = (x & y) ^ (~x & z);
    endfunction

    function [31:0] Maj(input [31:0] x, y, z);
        Maj = (x & y) ^ (x & z) ^ (y & z);
    endfunction

    function [31:0] Sigma0(input [31:0] x);
        Sigma0 = {x[1:0], x[31:2]} ^ {x[12:0], x[31:13]} ^ {x[21:0], x[31:22]};
    endfunction

    function [31:0] Sigma1(input [31:0] x);
        Sigma1 = {x[5:0], x[31:6]} ^ {x[10:0], x[31:11]} ^ {x[24:0], x[31:25]};
    endfunction

    function [31:0] sigma0(input [31:0] x);
        sigma0 = {x[6:0], x[31:7]} ^ {x[17:0], x[31:18]} ^ (x >> 3);
    endfunction

    function [31:0] sigma1(input [31:0] x);
        sigma1 = {x[16:0], x[31:17]} ^ {x[18:0], x[31:19]} ^ (x >> 10);
    endfunction

    //Finite State machine
    always @(posedge clk or posedge rst)
    begin
        if (rst)
            begin
                state <= IDLE;
            end
        else
            begin
                state <= next_state;
            end
    end

    always @(posedge clk)
    begin
        next_state <= state;
        done <= 1'b0;
        hash_out <= 16'h0000;
        
        case (state)
            IDLE:
            begin
                done <= 1'b0;
                if (start)
                begin
                    data_buf <= 512'b0;
                    data_count <= 6'd0;
                    next_state <= INIT;
                end
            end
            
            INIT:
            begin
                if (data_count < 32)
                begin
                    data_buf <= (data_buf << 16) | data_in;
                    data_count <= data_count + 1;
                end
                else
                begin
                    next_state <= LOAD;
                end
            end
            
            LOAD:
            begin
                if (data_count < 32) 
                begin
                    data_buf <= data_buf | (16'h8000 << ((31 - data_count) * 16));
                    data_buf[63:0] <= 64'h0000000000000200;
                    data_count <= 32;
                end
                a <= H0;
                b <= H1;
                c <= H2;
                d <= H3;
                e <= H4;
                f <= H5;
                g <= H6;
                h <= H7;
                next_state <= COMPUTE;
            end
            
            COMPUTE:
            begin
                for (i = 0; i < 16; i = i + 1)
                begin
                    W[i] <= data_buf[511 - (i * 32) - 32];
                end
                
                for (i = 16; i < 64; i = i + 1)
                begin
                    W[i] <= sigma1(W[i - 2]) + W[i - 7] + sigma0(W[i - 15]) + W[i - 16];
                end
                
                for (i = 0; i < 64; i = i + 1)
                begin
                    T1 <= h + Sigma1(e) + Ch(e, f, g) + K[i] + W[i];
                    T2 <= Sigma0(a) + Maj(a, b, c);
                    h <= g;
                    g <= f;
                    f <= e;
                    e <= d + T1;
                    d <= c;
                    c <= b;
                    b <= a;
                    a <= T1 + T2;
                end
                
                H0 <= H0 + a;
                H1 <= H1 + b;
                H2 <= H2 + c;
                H3 <= H3 + d;
                H4 <= H4 + e;
                H5 <= H5 + f;
                H6 <= H6 + g;
                H7 <= H7 + h;
                next_state <= OUTPUT;
            end
            
            OUTPUT:
            begin
                hash_out <= H0[31:16]^H0[15:0]^H1[31:16]^H1[15:0]^H2[31:16]^H2[15:0]^
                            H3[31:16]^H3[15:0]^H4[31:16]^H4[15:0]^H5[31:16]^H5[15:0]^
                            H6[31:16]^H6[15:0]^H7[31:16]^H7[15:0];
                next_state <= DONE;
            end
            
            DONE:
            begin
                done <= 1'b1;
                next_state <= IDLE;
            end
            
            default:
            begin
                next_state <= IDLE;
            end
            
        endcase
    end
endmodule
